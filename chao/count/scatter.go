package count

import (
	"chao/WriteToFile"
	"chao/lun"
	"chao/readconf"
	"fmt"
	"os"
	"sort"
	"strconv"
)

func ScatterPrizeSumInit(ag *lun.AutoGenerated) map[int]map[int]int {
	//初始化存放scater中几次数的map，key：key：value，中5：scatter：100次
	scatterprizesum := make(map[int]map[int]int)
	//scatter := ag.Scatter.Type[0]
	scattermutil := ag.Scatter.Mutil
	for i := 1; i <= len(scattermutil); i++ {
		scatterprizesum[i] = make(map[int]int)
		//scatterprizesum[i][scatter] = 0
	}
	return scatterprizesum
}
func HitScatter(ag *lun.AutoGenerated, Dispay [][]int, scaterprizesum map[int]map[int]int, freeprizenumsum map[int]map[int]int, conf *readconf.ConfigFile, file *os.File, scorecfg map[int][]int) (int, int, int, int) {
	//scatterscore := 0
	statter := ag.Scatter.Type[0]
	freesum := 0
	scatterscoresum := 0
	freecount2 := 0
	freegamecount, count, hit := FreeTrigger(ag, Dispay, statter, conf)
	//var HitOk bool
	if hit { //触发free
		//fmt.Printf("hit---%v\n",hit)
		//scatterscore = ScatterScore(ag, count)
		//AddScatterToPrizenumsum(scaterprizesum, count, statter)
		for i := 0; i < freegamecount; i++ {
			scatterscore := ScatterScore(ag, count)
			scatterscoresum = scatterscoresum + scatterscore
			AddScatterToPrizenumsum(scaterprizesum, count, statter)
			FreeDisplay := FreeBase(ag)
			//fmt.Printf("FreeDisplay:%v\n",FreeDisplay)
			freegamecount2, count2, hit2 := FreeRerigger(ag, FreeDisplay, statter, conf)
			if hit2 { //在free中再次触发free
				//fmt.Printf("hit2222---%v\n",hit)
				i = i + freegamecount2
				scatterscore2 := ScatterScore(ag, count)
				scatterscoresum = scatterscoresum + scatterscore2
				AddScatterToPrizenumsum(scaterprizesum, count2, statter)
				//fmt.Printf("--hit2--scatterprizesum%v,scatterscoresum:%v\n",scaterprizesum,scatterscoresum)

			}
			freescore := FreeLinechart(ag, FreeDisplay, conf, file, freeprizenumsum, scorecfg)
			freesum = freesum + freescore
			//fmt.Printf("FreeDisplay%v,freeprizenumsum:%v,scorecfg:%v\n",FreeDisplay,freeprizenumsum,scorecfg)
		}
	}

	//fmt.Printf("scaterprizesum:%v\n",scaterprizesum)

	//fmt.Printf("freesum%v\n",freesum)
	return scatterscoresum, freesum, freegamecount, freecount2
}
func FreeTrigger(ag *lun.AutoGenerated, Dispay [][]int, statter int, conf *readconf.ConfigFile) (int, int, bool) {
	//触发free
	scattercount := 0
	freegamecount := 0
	var hit bool
	//var HitOk bool
	for _, j := range Dispay {
		for _, num := range j {
			if num == statter {
				scattercount++
			}
		}
	}
	if scattercount >= conf.HitScatter {
		freegamecount = FreeGameCount(scattercount, ag.Scatter.FreeTrigger)
		hit = true
	}
	//fmt.Printf("freesum%v\n",freesum)
	return freegamecount, scattercount, hit
}

func FreeRerigger(ag *lun.AutoGenerated, Dispay [][]int, statter int, conf *readconf.ConfigFile) (int, int, bool) {
	//在free中再次触发free
	scattercount := 0
	freegamecount := 0
	var hit bool
	//var HitOk bool
	for _, j := range Dispay {
		for _, num := range j {
			if num == statter {
				scattercount++
			}
		}
	}
	if scattercount >= conf.HitScatter {
		freegamecount = FreeGameCount(scattercount, ag.Scatter.FreeRerigger)
		hit = true
	}
	//fmt.Printf("freesum%v\n",freesum)
	return freegamecount, scattercount, hit
}

func AddScatterToPrizenumsum(scatterprizesum map[int]map[int]int, count int, scatter int) {
	scatterprizesum[count][scatter]++
}
func ScatterScore(ag *lun.AutoGenerated, count int) int {
	//scatter的分数
	scattermutil := ag.Scatter.Mutil
	scatterscoremultiple := scattermutil[count-1]       //count 1 对应的是切片下标0
	scatterscore := scatterscoremultiple * ag.ScoreBase //scatterscore = scorebase * 对应的倍数
	//fmt.Printf("scattermutil%v,scatterscore:%v,scatterscoremultiple:%v\n", scattermutil, scatterscore,scatterscoremultiple)
	return scatterscore
}

func FreeGameCount(scattercount int, FreeTrigger []int) int {
	freegamecount := FreeTrigger[scattercount-1]

	return freegamecount
}

func ScatterPrizeSum(scaterprizesum map[int]map[int]int, file *os.File, scatter int, count int, scattermutil []int, scorebase int, conf *readconf.ConfigFile) {
	//存档Scatter统计信息
	sortkeys := make([]int, 0)
	Reversesortkeys := make([]int, 0)
	//sortkeys1 :=make([]int,0)
	for k, _ := range scaterprizesum {
		sortkeys = append(sortkeys, k)
	}
	sort.Ints(sortkeys)
	for k, _ := range sortkeys { //把排序好的切片反过来实现倒序
		Reversesortkeys = append(Reversesortkeys, sortkeys[len(sortkeys)-1-k])
	}
	data := "scatter：\n"
	WriteToFile.WriteTOFile(file, data)
	for _, j := range Reversesortkeys {
		//scaterprizesum[j]
		//fmt.Println(scaterprizesum[j][scatter])
		if j < conf.HitScatter {
			continue
		}
		scatterscoresum := scattermutil[j-1] * scaterprizesum[j][scatter] * scorebase
		avg := float64(scaterprizesum[j][scatter]) / float64(count) * 100
		data := fmt.Sprintf("        中:%v，次数: %v,平均出现几率：%v%v,总分(OUT):%v\n", j, scaterprizesum[j][scatter], avg, "%", scatterscoresum)
		WriteToFile.WriteTOFile(file, data)
	}

}

func FreeGamePrizeSum(freeprizesum map[int]map[int]int, file *os.File, scorecfg map[int][]int, freelinescorebase float64, freelinescountsum int) {
	//存档Freegame统计信息
	sortkeys := make([]int, 0)
	Reversesortkeys := make([]int, 0)
	sortkeys1 := make([]int, 0)
	//sortkeys1 :=make([]int,0)
	for k, _ := range freeprizesum {
		sortkeys = append(sortkeys, k)
	}
	for k, _ := range freeprizesum[1] {
		sortkeys1 = append(sortkeys1, k)
	}
	sort.Ints(sortkeys)
	sort.Ints(sortkeys1)
	fmt.Sprintf("freeprizesum:%v\n", freeprizesum)
	//fmt.Println(sortkeys,sortkeys1,Reversesortkeys)
	for k, _ := range sortkeys { //把排序好的切片反过来实现倒序
		Reversesortkeys = append(Reversesortkeys, sortkeys[len(sortkeys)-1-k])
	}
	//fmt.Println(sortkeys,sortkeys1,Reversesortkeys)
	for _, v := range Reversesortkeys {
		if v == 1 {
			continue
		}
		//fmt.Printf("中%v:\n", v)
		data := fmt.Sprintf("Free 中%v:\n", v)
		WriteToFile.WriteTOFile(file, data)
		for _, vv := range sortkeys1 {
			avg := float64(freeprizesum[v][vv]) / float64(freelinescountsum) * 100
			avgstr := strconv.FormatFloat(avg, 'f', -1, 64)
			hitscoreCfg := scorecfg[vv][v-1]
			scoreout := float64(hitscoreCfg) * float64(freeprizesum[v][vv]) * freelinescorebase
			avgout := float64(scoreout) / float64(freelinescountsum) / freelinescorebase * 100
			//fmt.Printf("    图标%v，次数%v，平均出现几率: %v%v 总分(OUT): %v , 平均OUT: %v%v,------%v,----freelinescountsum:%v \n", vv, freeprizesum[v][vv], avg, "%", scoreout, avgout, "%",freeprizesum,freelinescountsum)
			data := fmt.Sprintf("    图标%v，次数%v，平均出现几率: %v%v 总分(OUT): %v , 平均OUT: %v%v\n", vv, freeprizesum[v][vv], avgstr, "%", scoreout, avgout, "%")
			WriteToFile.WriteTOFile(file, data)
		}

	}

}
