package count

import (
	"chao/lun"
)

func Linechart(ag *lun.AutoGenerated, Dispay [][]int) int {
	wild := ag.Wild.Type[0]
	/*v := reflect.ValueOf(ag.ScoreCfg)
	l := v.NumField()
	scoremap := make(map[int]string)
	namelist := []string{"Num0", "Num1", "Num2", "Num3", "Num4", "Num5", "Num6", "Num7", "Num8", "Num9", "Num20"}
	for i := 0; i < l; i++ {
		scoremap[i] = namelist[i]
	}

	*/
	var sum int
	var winnumber map[int]int
	var count int
	var wildcount int
	var firsticon int
	var icon int
	for _, line := range ag.Lines {
		count = 0
		wildcount = 0
		winnumber = make(map[int]int, 5)
		for i, j := range line {
			if i == 0 {
				firsticon = Dispay[0][j] //每行的第一个图标
				count++
				if firsticon == wild {
					wildcount++
					winnumber[firsticon] = wildcount
				} else {
					winnumber[firsticon] = count
				}

			}

			if i > 0 {
				icon = Dispay[i][j] //取图标
				if firsticon == wild {
					count++
					if icon == wild {
						wildcount++
						winnumber[firsticon] = wildcount
					} else {
						winnumber[icon] = count
						firsticon = icon
					}
				} else {
					if icon == wild {
						count++
						winnumber[firsticon] = count
					} else {
						if firsticon == icon {
							count++
							winnumber[icon] = count
							firsticon = icon
						} else {
							break
						}
					}
				}
			}
		}
		//fmt.Printf("line:%v,count:%v,winnumber:%v,icon:%v,firsticon:%v\n", line, count, winnumber, icon, firsticon)
		maxscoreline := Score(ag, winnumber)	//一条线上的最大分数
		sum = sum + maxscoreline	//总分
	}
	return sum
	//W.Done()
}
