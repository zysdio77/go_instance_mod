package lun

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
)

type AutoGenerated struct {
	Wild struct {
		Type []int `json:"type"`
	} `json:"wild"`
	Scatter struct {
		Type  []int `json:"type"`
		Mutil []int `json:"mutil"`
	} `json:"scatter"`
	Bonus struct {
		Type []int `json:"type"`
	} `json:"bonus"`
	ScoreCfg struct {
		Num0  []int `json:"0"`
		Num1  []int `json:"1"`
		Num2  []int `json:"2"`
		Num3  []int `json:"3"`
		Num4  []int `json:"4"`
		Num5  []int `json:"5"`
		Num6  []int `json:"6"`
		Num7  []int `json:"7"`
		Num8  []int `json:"8"`
		Num9  []int `json:"9"`
		Num20 []int `json:"20"`
	} `json:"scoreCfg"`
	ScoreBase int     `json:"scoreBase"`
	Lines     [][]int `json:"lines"`
	Gears     struct {
		Pt96 struct {
			Base  [][]int `json:"base"`
			Fever [][]int `json:"fever"`
		} `json:"pt_9_6"`
	} `json:"gears"`
	ArrOtherSlots []struct {
		Wild struct {
			Type []int `json:"type"`
		} `json:"wild"`
		Scatter struct {
			Type  []int `json:"type"`
			Mutil []int `json:"mutil"`
		} `json:"scatter"`
		Bonus struct {
			Type []int `json:"type"`
		} `json:"bonus"`
		ScoreCfg struct {
		} `json:"scoreCfg"`
		ScoreBase int           `json:"scoreBase"`
		Lines     []interface{} `json:"lines"`
		Gears     struct {
			Pt96 struct {
				Base [][]int `json:"base"`
			} `json:"pt_9_6"`
		} `json:"gears"`
	} `json:"arrOtherSlots"`
	Others struct {
		BonusModel struct {
			Free struct {
				Val    []int `json:"val"`
				Weight []int `json:"weight"`
			} `json:"free"`
			BonusRollGear struct {
				Num6  []int `json:"6"`
				Num7  []int `json:"7"`
				Num8  []int `json:"8"`
				Num9  []int `json:"9"`
				Num10 []int `json:"10"`
				Num11 []int `json:"11"`
				Num12 []int `json:"12"`
				Num13 []int `json:"13"`
				Num14 []int `json:"14"`
			} `json:"bonusRollGear"`
			GearsValue  []int   `json:"gearsValue"`
			GearsWeight [][]int `json:"gearsWeight"`
			BigBonusCfg struct {
				Result []int `json:"result"`
				Weight []int `json:"weight"`
			} `json:"bigBonusCfg"`
			Weight struct {
				Normal []int `json:"normal"`
				Fever  []int `json:"fever"`
			} `json:"weight"`
			Mutil struct {
				MINI  int `json:"MINI"`
				MINOR int `json:"MINOR"`
				MAJOR int `json:"MAJOR"`
				GRAND int `json:"GRAND"`
			} `json:"mutil"`
			GrandRate []int `json:"grandRate"`
			Big       struct {
				Normal struct {
					Rewards []string `json:"rewards"`
					Weight  []int    `json:"weight"`
				} `json:"normal"`
				Fever struct {
					Rewards []string `json:"rewards"`
					Weight  []int    `json:"weight"`
				} `json:"fever"`
			} `json:"big"`
			Mid struct {
				Normal struct {
					Rewards []string `json:"rewards"`
					Weight  []int    `json:"weight"`
				} `json:"normal"`
				Fever struct {
					Rewards []string `json:"rewards"`
					Weight  []int    `json:"weight"`
				} `json:"fever"`
			} `json:"mid"`
			Small struct {
				Normal struct {
					Rewards []string `json:"rewards"`
					Weight  []int    `json:"weight"`
				} `json:"normal"`
				Fever struct {
					Rewards []string `json:"rewards"`
					Weight  []int    `json:"weight"`
				} `json:"fever"`
			} `json:"small"`
		} `json:"bonusModel"`
	} `json:"others"`
}

func Luninittest() *AutoGenerated {
	ag := AutoGenerated{}
	ag.Wild.Type = []int{20}
	ag.Scatter.Type = []int{21}
	ag.Scatter.Mutil = []int{0, 0, 2, 4, 10}
	ag.Bonus.Type = []int{}
	ag.ScoreCfg.Num0 = []int{0, 3, 10, 50, 150}
	ag.ScoreCfg.Num1 = []int{0, 0, 5, 30, 100}
	ag.ScoreCfg.Num2 = []int{0, 0, 5, 20, 80}
	ag.ScoreCfg.Num3 = []int{0, 0, 5, 15, 60}
	ag.ScoreCfg.Num4 = []int{0, 0, 5, 15, 50}
	ag.ScoreCfg.Num5 = []int{0, 0, 3, 10, 20}
	ag.ScoreCfg.Num6 = []int{0, 0, 3, 10, 20}
	ag.ScoreCfg.Num7 = []int{0, 0, 3, 10, 20}
	ag.ScoreCfg.Num8 = []int{0, 0, 3, 10, 20}
	ag.ScoreCfg.Num9 = []int{0, 0, 3, 10, 20}
	ag.ScoreCfg.Num20 = []int{0, 3, 10, 50, 150}
	ag.ScoreBase = 50
	ag.Lines = [][]int{
		{1, 1, 1, 1, 1},
		{2, 2, 2, 2, 2},
		{0, 0, 0, 0, 0},
		{2, 1, 0, 1, 2},
		{0, 1, 2, 1, 0},
		{1, 2, 2, 2, 1},
		{1, 0, 0, 0, 1},
		{2, 2, 1, 0, 0},
		{0, 0, 1, 2, 2},
		{1, 0, 1, 2, 1},
		{1, 2, 1, 0, 1},
		{2, 1, 1, 1, 2},
		{0, 1, 1, 1, 0},
		{2, 1, 2, 1, 2},
		{0, 1, 0, 1, 0},
		{1, 1, 2, 1, 1},
		{1, 1, 0, 1, 1},
		{2, 2, 0, 2, 2},
		{0, 0, 2, 0, 0},
		{2, 0, 0, 0, 2},
		{0, 2, 2, 2, 0},
		{1, 0, 2, 0, 1},
		{1, 2, 0, 2, 1},
		{2, 0, 2, 0, 2},
		{0, 2, 0, 2, 0},
		{0, 2, 1, 0, 2},
		{2, 0, 1, 2, 0},
		{2, 0, 1, 0, 2},
		{0, 2, 1, 2, 0},
		{0, 1, 2, 2, 1},
		{2, 1, 0, 0, 1},
		{2, 2, 0, 0, 0},
		{0, 0, 2, 2, 2},
		{1, 2, 0, 1, 0},
		{1, 0, 2, 1, 2},
		{2, 1, 2, 1, 0},
		{0, 1, 0, 1, 2},
		{1, 0, 0, 2, 2},
		{2, 2, 1, 1, 0},
		{0, 0, 0, 0, 0},
		{0, 0, 1, 1, 2},
		{0, 2, 2, 2, 2},
		{2, 0, 0, 0, 0},
		{0, 0, 0, 0, 2},
		{2, 2, 2, 2, 0},
		{1, 2, 1, 2, 1},
		{1, 0, 1, 0, 1},
		{2, 1, 0, 0, 0},
		{0, 1, 2, 2, 2},
		{2, 1, 1, 1, 1}}
	ag.Gears.Pt96.Base = [][]int{
		{1, 3, 6, 9, 22, 22, 4, 8, 20, 20, 20, 4, 7, 5, 21, 2, 3, 3, 9, 0, 0, 0, 5, 2, 2, 2, 6, 4, 4, 4, 9, 1, 1, 1, 21, 3, 3, 3, 8, 1, 1, 0, 0, 7, 2, 2, 8, 4, 4, 5},
		{22, 22, 22, 1, 1, 1, 7, 4, 3, 3, 3, 7, 9, 20, 20, 20, 5, 1, 21, 2, 8, 3, 6, 4, 4, 4, 2, 22, 22, 0, 0, 0, 5, 2, 2, 2, 21, 6, 4, 4, 4, 8, 1, 1, 3, 7, 0, 0, 2, 9},
		{0, 0, 1, 1, 22, 22, 22, 7, 9, 20, 20, 20, 6, 5, 5, 1, 2, 0, 0, 8, 4, 4, 3, 22, 22, 22, 2, 2, 2, 6, 3, 3, 3, 5, 4, 4, 4, 21, 9, 0, 0, 1, 1, 1, 8, 2, 2, 3, 3, 7},
		{22, 22, 22, 1, 3, 3, 21, 0, 7, 4, 8, 20, 20, 20, 9, 5, 2, 22, 1, 22, 0, 0, 0, 6, 1, 1, 1, 5, 4, 4, 4, 7, 2, 2, 2, 0, 20, 20, 6, 4, 0, 1, 2, 2, 3, 4, 9, 3, 3, 3},
		{3, 21, 5, 7, 6, 20, 20, 20, 9, 1, 0, 22, 4, 22, 8, 0, 1, 2, 3, 4, 5, 0, 0, 0, 4, 4, 4, 21, 2, 2, 2, 7, 1, 1, 1, 8, 3, 3, 3, 6, 2, 2, 0, 9, 22, 22, 1, 3, 4, 6},
	}

	return &ag

}

func Luninit(filename string) *AutoGenerated {
	b,err :=ioutil.ReadFile(filename)
	if err != nil{
		panic(fmt.Errorf("Fatal error config file: %s \\n",err))
	}
	var ag AutoGenerated
	err = json.Unmarshal(b, &ag)
	if err != nil {
		fmt.Println(err)
	}
	return &ag
}
