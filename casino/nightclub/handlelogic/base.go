package handlelogic

import (
	"math/rand"
)

func (ag *AutoGenerated )Base() [][]int {
	//随机产生面板
	var gears = make([][]int,5)
	for i ,j := range ag.Gears.Pt96.Base{
		index := rand.Intn(len(j))
		//gears = append(gears,i)
		if index == len(j)-1{
			gears[i] = append(gears[i],j[index])
			gears[i] = append(gears[i],j[0])
			gears[i] = append(gears[i],j[1])
		}else if index == len(j)-2{
			gears[i] =  append(gears[i],j[index])
			gears[i] =  append(gears[i],j[index+1])
			gears[i] =  append(gears[i],j[0])
		} else {
			gears[i] = append(gears[i],j[index])
			gears[i] = append(gears[i],j[index+1])
			gears[i] = append(gears[i],j[index+2])
		}

	}
	//fmt.Printf("gears:%v\n",gears)
	return gears
}

func (ag *AutoGenerated)TestBase() [][]int {
	//测试用的轮子，方便测试
	gears := make([][]int,5)
	gears[0]=[]int{20,20,20}
	gears[1]=[]int{20,1,20}
	gears[2]=[]int{1,20,20}
	gears[3]=[]int{1,1,20}
	gears[4]=[]int{21,21,21}
	return gears
}

func (ag *AutoGenerated )FreeBase() [][]int {
	//随机产生面板
	var gears = make([][]int,5)
	for i ,j := range ag.Gears.Pt96.Fever{
		index := rand.Intn(len(j))
		//gears = append(gears,i)
		if index == len(j)-1{
			gears[i] = append(gears[i],j[index])
			gears[i] = append(gears[i],j[0])
			gears[i] = append(gears[i],j[1])
		}else if index == len(j)-2{
			gears[i] =  append(gears[i],j[index])
			gears[i] =  append(gears[i],j[index+1])
			gears[i] =  append(gears[i],j[0])
		} else {
			gears[i] = append(gears[i],j[index])
			gears[i] = append(gears[i],j[index+1])
			gears[i] = append(gears[i],j[index+2])
		}

	}
	//fmt.Printf("gears:%v\n",gears)
	return gears
}

func (ag *AutoGenerated)FreeTestBase() [][]int {
	//测试用的轮子，方便测试
	gears := make([][]int,5)
	gears[0]=[]int{21,21,20}
	gears[1]=[]int{20,1,20}
	gears[2]=[]int{1,21,20}
	gears[3]=[]int{1,21,20}
	gears[4]=[]int{20,20,21}
	return gears
}

func (ag *AutoGenerated) BonusBase(bonusidex int,bonusRollGear map[int][]int ) []int  {
	//respin gears
	var bonusarr []int
	var bonus []int
	bonusbases := bonusRollGear[bonusidex]
	for _,j := range bonusbases{
		bonusbase := ag.ArrOtherSlots[0].Gears.Pt96.Base[j-1]
		indexn := rand.Intn(len(bonusbase))
		bonusarr = append(bonusarr,indexn)
		bonus = append(bonus,bonusbase[indexn])
	}
	//fmt.Printf("bonusarr:%v,bonus:%v\n",bonusarr,bonus)
	return bonus
	//ag.Others.BonusModel.BonusRollGear
}