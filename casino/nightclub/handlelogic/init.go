package handlelogic

import (
"encoding/json"
"fmt"
"io/ioutil"
)

type AutoGenerated struct {
	Wild struct {
		Type []int `json:"type"`
	} `json:"wild"`
	Scatter struct {
		Type         []int `json:"type"`
		Mutil        []int `json:"mutil"`
		FreeTrigger  []int `json:"freeTrigger"`
		FreeRerigger []int `json:"freeRerigger"`
	} `json:"scatter"`
	Bonus struct {
		Type []int `json:"type"`
	} `json:"bonus"`
	ScoreCfg struct {
		Num0  []int `json:"0"`
		Num1  []int `json:"1"`
		Num2  []int `json:"2"`
		Num3  []int `json:"3"`
		Num4  []int `json:"4"`
		Num5  []int `json:"5"`
		Num6  []int `json:"6"`
		Num7  []int `json:"7"`
		Num8  []int `json:"8"`
		Num9  []int `json:"9"`
		Num20 []int `json:"20"`
	} `json:"scoreCfg"`
	ScoreBase int     `json:"scoreBase"`
	Lines     [][]int `json:"lines"`
	Gears     struct {
		Pt96 struct {
			Base  [][]int `json:"base"`
			Fever [][]int `json:"fever"`
		} `json:"pt_9_6"`
	} `json:"gears"`
	ArrOtherSlots []struct {
		Wild struct {
			Type []int `json:"type"`
		} `json:"wild"`
		Scatter struct {
			Type  []int `json:"type"`
			Mutil []int `json:"mutil"`
		} `json:"scatter"`
		Bonus struct {
			Type []int `json:"type"`
		} `json:"bonus"`
		ScoreCfg struct {
		} `json:"scoreCfg"`
		ScoreBase int           `json:"scoreBase"`
		Lines     []interface{} `json:"lines"`
		Gears     struct {
			Pt96 struct {
				Base [][]int `json:"base"`
			} `json:"pt_9_6"`
		} `json:"gears"`
	} `json:"arrOtherSlots"`
	Others struct {
		BonusModel struct {
			Free struct {
				Val    []int `json:"val"`
				Weight []int `json:"weight"`
			} `json:"free"`
			BonusRollGear struct {
				Num6  []int `json:"6"`
				Num7  []int `json:"7"`
				Num8  []int `json:"8"`
				Num9  []int `json:"9"`
				Num10 []int `json:"10"`
				Num11 []int `json:"11"`
				Num12 []int `json:"12"`
				Num13 []int `json:"13"`
				Num14 []int `json:"14"`
			} `json:"bonusRollGear"`
			GearsValue  []int   `json:"gearsValue"`
			GearsWeight [][]int `json:"gearsWeight"`
			BigBonusCfg struct {
				Result []int `json:"result"`
				Weight []int `json:"weight"`
			} `json:"bigBonusCfg"`
			Weight struct {
				Normal []int `json:"normal"`
				Fever  []int `json:"fever"`
			} `json:"weight"`
			Mutil struct {
				MINI  int `json:"MINI"`
				MINOR int `json:"MINOR"`
				MAJOR int `json:"MAJOR"`
				GRAND int `json:"GRAND"`
			} `json:"mutil"`
			GrandRate []int `json:"grandRate"`
			Big       struct {
				Normal struct {
					Rewards []string `json:"rewards"`
					Weight  []int    `json:"weight"`
				} `json:"normal"`
				Fever struct {
					Rewards []string `json:"rewards"`
					Weight  []int    `json:"weight"`
				} `json:"fever"`
			} `json:"big"`
			Mid struct {
				Normal struct {
					Rewards []string `json:"rewards"`
					Weight  []int    `json:"weight"`
				} `json:"normal"`
				Fever struct {
					Rewards []string `json:"rewards"`
					Weight  []int    `json:"weight"`
				} `json:"fever"`
			} `json:"mid"`
			Small struct {
				Normal struct {
					Rewards []string `json:"rewards"`
					Weight  []int    `json:"weight"`
				} `json:"normal"`
				Fever struct {
					Rewards []string `json:"rewards"`
					Weight  []int    `json:"weight"`
				} `json:"fever"`
			} `json:"small"`
		} `json:"bonusModel"`
	} `json:"others"`
}

func Gearsinit(filename string) *AutoGenerated {
	b, err := ioutil.ReadFile(filename)
	if err != nil {
		panic(fmt.Errorf("Fatal error config file: %s \\n", err))
	}
	var ag AutoGenerated
	err = json.Unmarshal(b, &ag)
	if err != nil {
		fmt.Println(err)
	}
	return &ag
}
func (ag *AutoGenerated)InitScoreCifToMap() map[int][]int {
	//struct è½¬ map
	ScoreCfgMap := make(map[int][]int)
	ScoreCfgJson ,err := json.Marshal(ag.ScoreCfg)
	if err != nil {
		fmt.Printf("InitScoreCifToMap Error:%v\n",err)
	}
	json.Unmarshal(ScoreCfgJson,&ScoreCfgMap)
	//fmt.Println(ScoreCfgMap)
	return ScoreCfgMap
}

func InitPrizeSumMap(ScoreCfgMap map[int][]int) map[int]map[int]int{
	//var prizesummap map[int]map[int]int
	prizesummap := make(map[int]map[int]int)
	fmt.Println(ScoreCfgMap)
	for i:=1; i<=len(ScoreCfgMap[0]);i++{
		prizesummap[i] = make(map[int]int)
	}
	for k,v := range ScoreCfgMap{
		for i:=1;i<=len(v);i++{
			//prizesummap[i] = make(map[int]int)
			prizesummap[i][k]=0
			//fmt.Println(prizesummap)
		}

	}
	//prizesummap.SortPrizeSumMap()
	fmt.Printf("----------------%v\n",prizesummap)
	return prizesummap
}

func (ag *AutoGenerated)InitScattermap() map[int]map[int]int {
	scattermap := make(map[int]map[int]int)
	for i:=1;i<= len(ag.Scatter.Mutil);i++{
		scattermap[i]=make(map[int]int)
		scattermap[i][ag.Scatter.Type[0]]=0
	}

	return scattermap
}

func (ag *AutoGenerated) InitBonusRollGearToMap() map[int][]int {
	var bonusRollGear = make(map[int][]int)
	var err error
	data ,err :=json.Marshal(ag.Others.BonusModel.BonusRollGear)
	if err !=nil {
		fmt.Printf("Error: BonusBase json.Marshal(ag.Others.BonusModel.BonusRollGear) %v\n",err)
	}
	err = json.Unmarshal(data,&bonusRollGear)
	if err != nil {
		fmt.Printf("Error: BonusBase json.Unmarshal(data,&a) %v\n",err)
	}
	fmt.Println("bonusbaseindex:",bonusRollGear)
	return bonusRollGear
}