package statistics

import (
	"fmt"
	"nightclub/WriteToFile"
	"nightclub/handlelogic"
	"nightclub/readconf"
	"os"
	"sort"
	"strconv"
)

type PrizSumMap map[int]map[int]int

func StatisticsPrizeSumMap(prizesummap map[int]map[int]int ,prizemap map[int]int)  {
	for v,k := range prizemap{
		prizesummap[k][v]++
	}
}

func SortPrizeSumMap(prizesummap map[int]map[int]int,ScoreCfgMap  map[int][]int,linescountsum int,linescorebase float64,f *os.File,gearname string)  {
	sortkeys := make([]int, 0)
	Reversesortkeys := make([]int, 0)
	sortkeys1 := make([]int, 0)
	for k, _ := range prizesummap {
		sortkeys = append(sortkeys, k)
	}

	for k, _ := range prizesummap[1] {
		sortkeys1 = append(sortkeys1, k)
	}

	sort.Ints(sortkeys)
	sort.Ints(sortkeys1)
	for k, _ := range sortkeys { //把排序好的切片反过来实现倒序
		Reversesortkeys = append(Reversesortkeys, sortkeys[len(sortkeys)-1-k])
	}

	for _, v := range Reversesortkeys {
		if v == 1 {
			continue
		}
		fmt.Printf("%v 中%v:\n", gearname,v)
		data := fmt.Sprintf("%v 中%v:\n", gearname,v)
		WriteToFile.WriteTOFile(f, data)
		for _, vv := range sortkeys1 {
			//avg := float64(prizesummap[v][vv])/float64(conf.Count)*100
			avg := float64(prizesummap[v][vv]) / float64(linescountsum) * 100
			avgstr := strconv.FormatFloat(avg, 'f', 6, 64)
			hitscoreCfg := ScoreCfgMap[vv][v-1]
			scoreout := float64(hitscoreCfg) * float64(prizesummap[v][vv]) * linescorebase
			scoreoutstr := strconv.FormatFloat(scoreout,'f',-1,64)
			avgout := float64(scoreout) / float64(linescountsum) / linescorebase * 100
			avgoutstr := strconv.FormatFloat(avgout,'f',6,64)
			fmt.Printf("        图标%v，次数%v，平均出现几率: %v%v 总分(OUT): %v , 平均OUT: %v%v\n", vv, prizesummap[v][vv],avgstr,"%",scoreoutstr,avgoutstr,"%")
			data := fmt.Sprintf("        图标%v，次数%v，平均出现几率: %v%v 总分(OUT): %v , 平均OUT: %v%v\n", vv, prizesummap[v][vv], avgstr, "%", scoreoutstr, avgoutstr, "%")
			WriteToFile.WriteTOFile(f, data)
		}

	}
	fmt.Printf("prizenumsum:%v,sortkeys:%v,sortkeys1:%v,Reversesortkeys:%v\n", prizesummap, sortkeys, sortkeys1, Reversesortkeys)
}

func SortScatterSumMap(ag *handlelogic.AutoGenerated,scattermap map[int]map[int]int,conf *readconf.ConfigFile,f *os.File) int{
	sortkeys := make([]int, 0)
	Reversesortkeys := make([]int, 0)
	//sortkeys1 := make([]int, 0)
	scatter := ag.Scatter.Type[0]
	count := conf.Count
	scorebase := ag.ScoreBase
	scattermutil := ag.Scatter.Mutil
	for k, _ := range scattermap {
		sortkeys = append(sortkeys, k)
	}

	sort.Ints(sortkeys)
	for k, _ := range sortkeys { //把排序好的切片反过来实现倒序
		Reversesortkeys = append(Reversesortkeys, sortkeys[len(sortkeys)-1-k])
	}
	fmt.Printf("sortkeys: %v ,Reversesortkeys: %v \n",sortkeys,Reversesortkeys)
	scoresum := 0
	for _, v := range Reversesortkeys {
		if v >= 3 {
			scattercount := scattermap[v][scatter]
			avg:=float64(scattercount) / float64(count) *100
			avgstr := strconv.FormatFloat(avg, 'f', 6, 64)
			s := scattermutil[v-1]
			out := s * scorebase * scattercount
			//avgout := float64(out)/ float64(scorebase) *100
			//avgoutstr := strconv.FormatFloat(avgout,'f',6,64)
			scoresum =  scoresum + out
			fmt.Printf("scatter中 %v : 次数: %v , 平均出现几率： %v%v ， 总分： %v ， 平均out %v%v。\n",v,scattercount,avgstr,"%",out)
			WriteToFile.WriteTOFile(f,fmt.Sprintf("scatter中 %v : 次数: %v , 平均出现几率： %v%v ， 总分： %v ， 平均out %v%v。\n",v,scattercount,avgstr,"%",out))
		}
	}
	//fmt.Printf("scatter总得分：%v\n",scoresum)
	//WriteToFile.WriteTOFile(f,fmt.Sprintf("scatter总得分：%v\n",scoresum))
	return scoresum
}
